1. معرفی پروژه
این پروژه شامل چهار الگوریتم مهم از دسته Greedy Algorithms است که برای حل مسائل بهینه‌سازی استفاده می‌شوند:
- الگوریتم هافمن (Huffman Encoding)
- الگوریتم پرایم (Prim’s Algorithm)
- الگوریتم انتخاب فعالیت (Activity Selection)
- الگوریتم کروسکال (Kruskal’s Algorithm)

هر کدام از این الگوریتم‌ها در یک کلاس جداگانه پیاده‌سازی شده و در فایل Program.cs تست و اجرا می‌شوند.

------------------------------------------------------------

2. الگوریتم Huffman Encoding
هدف:
فشرده‌سازی داده‌ها با کدگذاری کاراکترها بر اساس میزان تکرارشان.

مراحل:
1. ساخت نودها برای هر کاراکتر و فرکانس مربوطه
2. مرتب‌سازی نودها بر اساس فرکانس
3. ادغام دو نود با کمترین فرکانس و ایجاد یک نود جدید
4. تکرار مراحل تا باقی‌ماندن یک نود (ریشه درخت هافمن)
5. تولید کد باینری برای هر کاراکتر

کاربرد:
فشرده‌سازی متون (ZIP, JPEG, MP3)

------------------------------------------------------------

3. الگوریتم Prim’s Algorithm
هدف:
پیدا کردن Minimum Spanning Tree (MST) در گراف‌های وزن‌دار.

ایده:
شروع از یک رأس دلخواه، اضافه کردن یال با کمترین وزن که یک رأس جدید را به درخت اضافه کند، تا همه رأس‌ها پوشش داده شوند.

کاربرد:
طراحی شبکه‌های برق، کابل‌کشی، ارتباطات.

------------------------------------------------------------

4. الگوریتم Activity Selection
هدف:
انتخاب بیشترین تعداد فعالیت‌ها بدون تداخل زمانی.

مراحل:
1. مرتب‌سازی فعالیت‌ها بر اساس زمان پایان
2. انتخاب اولین فعالیت
3. انتخاب فعالیت بعدی که زمان شروع آن بعد از زمان پایان آخرین فعالیت انتخاب شده باشد

کاربرد:
برنامه‌ریزی جلسات، تخصیص منابع.

------------------------------------------------------------

5. الگوریتم Kruskal’s Algorithm
هدف:
پیدا کردن MST با استفاده از مرتب‌سازی یال‌ها و روش Union-Find.

مراحل:
1. مرتب‌سازی یال‌ها بر اساس وزن
2. افزودن یال به MST اگر باعث ایجاد حلقه نشود
3. استفاده از Union-Find برای مدیریت مجموعه‌ها
4. تکرار تا تشکیل درخت پوشا

کاربرد:
طراحی مسیرها، شبکه‌سازی.

------------------------------------------------------------

6. کلاس Program (اجرای اصلی)
وظایف:
- تست الگوریتم Huffman با کاراکترها و فرکانس نمونه
- تست الگوریتم Prim با یک گراف وزن‌دار نمونه
- تست الگوریتم Activity Selection با مجموعه‌ای از فعالیت‌ها
- تست الگوریتم Kruskal با گراف وزن‌دار

------------------------------------------------------------

7. نکات پایانی
- ساختار کد به صورت شیء‌گرا (OOP) طراحی شده است.
- هر الگوریتم در کلاس جداگانه قرار دارد تا قابلیت نگهداری و توسعه بالایی داشته باشد.
- این پروژه یک نمونه آموزشی و کاربردی برای یادگیری و تمرین الگوریتم‌های حریصانه است.
